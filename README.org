#+TITLE: Scala Benchmarks
#+AUTHOR: Colin
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/colin/code/org-theme.css"/>

An independent set of benchmarks for testing common Scala idioms.

** Results

*** Functional Programming

**** Folding

We often want to collapse a collection into some summary of its elements.
This is known as a /fold/, a /reduce/, or a /catamorphism/:

#+BEGIN_SRC scala
  List(1,2,3).foldLeft(0)(_ + _)  // 6
#+END_SRC

How fast is this operation in the face of the JVM's ~while~ and mutable
variables? For instance the familiar, manual, and error-prone:

#+BEGIN_SRC scala
  var n: Int = 0
  var i: Int = coll.length - 1

  while (i >= 0) {
    n += coll(i)
    i -= 1
  }
#+END_SRC

~FoldBench~ compares ~List~, ~Vector~, ~Array~, ~Stream~, and ~Iterator~ for their speeds
in various fold operations over Ints. ~FoldClassBench~ tries these same operations over a simple
wrapping class to see how boxing/references affect things.

~Int~ Results:

/All times are in microseconds./

| Benchmark      | List | Vector | Array |         Stream | Iterator |
|----------------+------+--------+-------+----------------+----------|
| ~foldLeft~     | 33.3 |   68.9 |  56.4 |           56.9 |     55.4 |
| ~foldRight~    | 69.2 | 228.39 |  55.1 | Stack Overflow |    147.6 |
| Tail Recursion | 45.9 |        |       |           69.8 |          |
| ~sum~          | 76.9 |   71.0 |  79.0 |           74.7 |          |
| ~while~        | 47.2 |   38.4 |   3.0 |           52.9 |     45.4 |

~Pair~ Class Results:

/All times are in microseconds./

| Benchmark      | List | Vector | Array |         Stream | Iterator |
|----------------+------+--------+-------+----------------+----------|
| ~foldLeft~     | 39.5 |   70.2 |  39.9 |           68.2 |     65.8 |
| ~foldRight~    | 83.6 |  242.1 |  38.8 | Stack Overflow |    157.3 |
| Tail Recursion | 39.2 |        |       |           93.0 |          |
| ~while~        | 39.3 |   57.8 |  36.2 |           70.1 |     39.2 |

Conclusions:

- ~foldLeft~ is always better than both ~foldRight~ and manual tail recursion for
  catamorphisms (reduction to a single value).
- ~sum~ should be avoided.
- ~Iterator~ benefits from ~while~, but not enough to beat ~List~.
- Collections with random access (especially ~Array~) benefit from ~while~
  loops.
- *Array has no advantage over List when holding non-primitive types!*

Recommendation:

#+BEGIN_QUOTE
~List.foldLeft~ is concise and performant for both primitive and boxed types.
If you were already dealing with an ~Array[Int]~ or likewise, then a ~while~
loop will be faster.
#+END_QUOTE

**** Chained Higher-Order Functions

It's common to string together multiple operations over a collection, say:

#+BEGIN_SRC scala
  List(1,2,3,4).map(foo).filter(pred).map(bar)
#+END_SRC

which is certainly shorter and cleaner in its intent than manually manipulating
a mutable collection in a ~while~ loop. Are higher-order operations like these
still fast? People used to Haskell's list fusion might point out that these
operations typically don't fuse in Scala, meaning that each chained operation
fully iterates over the entire collection and allocates a new copy. ~Stream~
and ~Iterator~ are supposed to be the exceptions, however.

~Stream~ in particular is what people wanting Haskell's lazy lists may reach
for first, on the claim that the elements memoize, chained operations fuse,
and they support infinite streams of values. Let's see how everything performs.

~StreamBench~ performs the following operations on ~List~, ~Vector~, ~Array~,
~Stream~, and ~Iterator~. We test:

- /Head/: map-filter-map-head. Which collections "short-circuit", only
  fully processing the head and nothing else?
- /Max/: map-filter-map-max. How quickly can each collection fully process itself?
  Does fusion occur (esp. with ~Stream~)?
- /Reverse/: reverse-head. Can any of the collections "cheat" and grab the last
  element quickly?
- /Sort/: map-filter-map-sorted-head. Does ~Stream~ still leverage laziness with
  a "mangling" operation like sort?

Results:

/All times are in microseconds./

| Benchmark |  List | Vector | Array | Stream | Iterator |
|-----------+-------+--------+-------+--------+----------|
| Head      | 182.3 |  133.2 | 206.3 |  0.065 |    0.023 |
| Max       | 198.9 |  263.5 | 192.7 |  863.7 |    139.7 |
| Reverse   |  37.8 |  146.7 |  45.6 |  371.6 |          |
| Sort      | 309.1 |  277.8 | 289.4 | 1482.8 |          |

Conclusions:

- ~Stream~ won't do work it doesn't have to, as advertised (re: /Head/).
- ~Stream~ is very slow to fully evaluate, implying no operation fusion.
  Nothing clever happens with sorting.
- ~Iterator~ overall is the fastest collection to chain higher-order
  functions.
- ~List~ has the fastest ~reverse~.

Recommendation:

#+BEGIN_QUOTE
If you want to chain higher-order operations in Scala, use an ~Iterator~.
If you have something like a ~List~ instead, create an ~Iterator~ first
with ~.iterator~ before you chain.
#+END_QUOTE

*** Mutable Data

**** ~List~ and ~ListBuffer~

Say you want to iterate over some collection and build up a new one. For whatever reason
~.map~ and ~.foldLeft~ aren't enough. Which of these approaches is faster, then?

- ~while~ looping over an ~Array~, appending each result to a mutable ~ListBuffer~?
- Tail recursion over a ~List~, pattern matching, and List's ~::~?

~AccumBench~ tests these two approaches.

Results:

/All times are in microseconds./

| Benchmark | ~Array => ListBuffer~ | ~List => List~ | ~Array => List~ |
| Ints      |                 619.9 |           58.9 |           191.4 |
| Classes   |                 610.9 |           38.6 |           138.6 |

Conclusions:

- The ~ListBuffer.append~ calls seem to dominate any advantage ~while~ looping
  would have had.
- Lists are fast. Oddly faster on classes, rather than on primitives.

Recommendation:

#+BEGIN_QUOTE
Avoid ~ListBuffer~ - idiomatic tail recursive code will be cleaner and faster.
If you started with ~Array~ and can't change that, consider ~Array.toList~ before
continuing. The ~Array.toList~ call is still cheaper than the accumulated
~ListBuffer.append~ calls.
#+END_QUOTE

**** Mutable ~Set~ and Java's ~ConcurrentHashMap~

You'd like to build up a unique set of values and for some reason calling ~.toSet~
on your original collection isn't enough. Perhaps you don't have an original collection.
Scala's collections have been criticized for their performance, with one famous complaint
saying how their team had to fallback to using Java collection types entirely because
the Scala ones couldn't compare (that was for Scala 2.8, mind you).

Is this true? ~UniquesBench~ compares both of Scala's mutable and immutable ~Set~ types with
Java's ~ConcurrentHashMap~ to see which can accumulate unique values faster.

Results:

/All values are in microseconds./

| Benchmark    | ~mutable.Set~ | ~immutable.Set~ | Java ~ConcurrentHashMap~ |
|--------------+---------------+-----------------+--------------------------|
| 100 values   |           4.6 |             7.7 |                      6.1 |
| 1000 values  |          62.2 |           107.4 |                     71.3 |
| 10000 values |        811.1* |          1290.4 |                    777.1 |

*Note*: About half the time the 10000-value benchmark for ~mutable.Set~ optimizes
down to ~600us instead of the ~800us shown in the chart.

Conclusions:

- ~mutable.Set~ is fastest at least for small amounts of data, and /might/ be
  fastest at scale.
- ~immutable.Set~ is slower and has worse growth, as expected.

Recommendation:

#+BEGIN_QUOTE
First consider whether your algorithm can't be rewritten in terms of the usual
FP idioms, followed by a ~.toSet~ call to make the collection unique.

If that isn't possible, then trust in the performance of native Scala collections
and use ~mutable.Set~.
#+END_QUOTE

*** Pattern Matching

**** Deconstructing Containers

It's common to decontruct containers like this in recursive algorithms:

#+BEGIN_SRC scala
  def safeHead[A](s: Seq[A]): Option[A] = s match {
    case Seq() => None
    case h +: _ => Some(h)
  }
#+END_SRC

But ~List~ and ~Stream~ have special "cons" operators, namely ~::~ and ~#::~
respectively. The ~List~ version of the above looks like:

#+BEGIN_SRC scala
  def safeHead[A](l: List[A]): Option[A] = l match {
    case Nil => None
    case h :: _ => Some(h)
  }
#+END_SRC

How do these operators compare? Also, is it any slower to do it this way than
a more Java-like:

#+BEGIN_SRC scala
  def safeHead[A](l: List[A]): Option[A] =
    if (l.isEmpty) None else l.head
#+END_SRC

The ~MatchContainersBench~ benchmarks use a tail-recursive algorithm to find
the last element of each of ~List~, ~Vector~, ~Array~, ~Seq~, and ~Stream~.

Results:

/All times are in microseconds./

| Benchmark       | List | Vector |   Seq |   Array | Stream |
|-----------------+------+--------+-------+---------+--------|
| ~::~ Matching   | 42.8 |        |       |         |  168.4 |
| ~+:~ Matching   | 79.0 | 1647.5 | 707.4 |         |  170.2 |
| ~if~ Statements | 39.9 |  816.9 |  39.4 | 16020.6 |   55.8 |

Conclusions:

- ~List~ matching with ~::~ is /fast/.
- ~Seq~ matching with ~+:~, its canonical operator, is ironically slow.
- Pattern matching with ~+:~ should be avoided in general.
- ~if~ is generally faster than pattern matching, but the code isn't as nice.
- Avoid recursion with ~Vector~ and ~Array~!
- ~Array.tail~ is pure evil. Each call incurs ~ArrayOps~ wrapping and
  seems to reallocate the entire ~Array~. ~Vector.tail~ incurs a similar
  slowdown, but not as drasticly.

Recommendation:

#+BEGIN_QUOTE
Recursion involving containers should be done with ~List~ and pattern matching
for the best balance of speed and simplicity.
#+END_QUOTE
**** Guard Patterns

It can sometimes be cleaner to check multiple ~Boolean~ conditions using a ~match~:

#+BEGIN_SRC scala
  def foo(i: Int): Whatever = i match {
    case _ if bar(i) => ???
    case _ if baz(i) => ???
    case _ if zoo(i) => ???
    case _ => someDefault
  }
#+END_SRC

where we don't really care about the pattern match, just the guard.
This is in constrast to ~if~ branches:

#+BEGIN_SRC scala
  def foo(i: Int): Whatever = {
    if (bar(i)) ???
    else if (baz(i)) ???
    else if (zoo(i)) ???
    else someDefault
  }
#+END_SRC

which of course would often be made more verbose by many ~{}~ pairs.
Are we punished for the empty pattern matches? ~MatchBench~ tests this, with
various numbers of branches.

Results:

/All times are in nanoseconds./

| Benchmark    | Guards | Ifs |
|--------------+--------+-----|
| 1 Condition  |    3.3 | 3.3 |
| 2 Conditions |    3.6 | 3.6 |
| 3 Conditions |    3.9 | 3.9 |

Identical! Feel free to use whichever you think is cleaner.
